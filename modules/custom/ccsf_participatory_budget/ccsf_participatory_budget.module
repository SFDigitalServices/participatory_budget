<?php
// vi: filetype=php

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;

function ccsf_participatory_budget_theme($existing, $type, $theme, $path) {
  return array(
    'ccsf_participatory_budget__district_contact' => array(
      'variables' => array(
        'district' => null,
        'can_update' => null,
      ),
    ),
    'ccsf_participatory_budget_help' => array(
      'variables' => array(
        'site_email' => \Drupal::config('system.site')->get('mail'),
      ),
    ),
  );
}

/**
 * Implements hook_user_login().
 */
function ccsf_participatory_budget_user_login(\Drupal\user\UserInterface $account) {
  // Default login destination to the dashboard.
  $current_request = \Drupal::service('request_stack')->getCurrentRequest();
  \Drupal::logger('ccsf_participatory_budget')->notice("user logging in with destination: " . $current_request->getUri());
  if (!$current_request->query->get('destination') && // tried to access page requiring login
    !strpos($current_request->getPathInfo(), 'user/reset') // password reset
  ) {
    \Drupal::logger('ccsf_participatory_budget')->notice("redirecting login destined for: " . $current_request->getUri());
    $current_request->query->set(
      'destination',
      \Drupal\Core\Url::fromRoute('<front>')->toString()
    );
  }
}

/**
 * Implements hook_help().
 */
function ccsf_participatory_budget_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
  case 'help.page.ccsf_participatory_budget':
    return [
      '#theme' => 'ccsf_participatory_budget_help',
    ];
  }
}

function ccsf_participatory_budget_webform_element_alter(array &$element, FormStateInterface $form_state, array $context) {
  // if element has specific languages specified, only show for these languages
  if (isset($element['#languages']) && !in_array(\Drupal::languageManager()->getCurrentLanguage()->getId(), $element['#languages'])) {
    $element['#access'] = false;
  }

  // if element has max_combined_checkboxes validate that the nested checkboxes count doesn't exceed the given count
  if (isset($element['#max_combined_checkboxes'])) {
    $element['#element_validate'][] = 'ccsf_participatory_budget_combined_checkboxes_validate';
  }
}

// validate any containers that have a #max_combined_checkboxes attribute
function ccsf_participatory_budget_combined_checkboxes_validate(array &$element, FormStateInterface $form_state, array &$form) {
  $max_options = $element['#max_combined_checkboxes'];

  $count_checkboxes = function($carry, $v) use (&$count_checkboxes, $form_state) {
    if (is_array($v) && isset($v['#type'])) {
      if ($v['#type'] === 'checkboxes') {
        return $carry + count($form_state->getValue($v['#webform_key']));
      }

      // could be a nested layout or section element, recurse
      return array_reduce($v, $count_checkboxes, $carry);
    }

    return $carry;
  };

  $num_checked = array_reduce($element, $count_checkboxes, 0);

  if ($max_options < $num_checked) {
    $tArgs = array(
      '%name' => empty($element['#title']) ? $element['#parents'][0] : $element['#title'],
      '%max_options' => $max_options,
    );
    $form_state->setError(
      $element,
      t('Maximum of %max_options options allowed for %name', $tArgs)
    );
  }
}
