<?php

/**
 * Implements hook_entity_field_access_alter().
 */
function administerusersbyrole_hack_entity_field_access_alter(array &$grants, array $context) {
  if ($context['field_definition']->getTargetEntityTypeId() != 'user') {
    return;
  }

  // Override the :default AccessResult if we allow the field to be shown in
  // the hook administerusersbyrole_entity_field_access().
  if (isset($grants['administerusersbyrole'])
    && $grants[':default']->isForbidden()
    && $grants['administerusersbyrole']->isAllowed()) {

    $grants[':default'] = clone $grants['administerusersbyrole'];
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Tediously the user module uses hard-coded permission names.
 * Add 'admin-only' fields back in depending on our permissions.
 */
function administerusersbyrole_hack_form_user_register_form_alter(&$form, &$form_state) {
  $user = $form_state->getFormObject()->getEntity();
  $account = Drupal::currentUser();

  if (!$account->hasPermission('administer users') && $account->hasPermission('create users')) {
    // Corrections for RegisterForm::form.
    $form['administer_users']['#value'] = TRUE;
    unset($form['#attributes']['data-user-info-from-browser']);
    $user->activate();

    // Corrections for AccountForm::form.
    // TODO Password field is not in the normal order
    $form['account']['pass'] = array(
      '#type' => 'password_confirm',
      '#size' => 25,
      '#description' => t('Provide a password for the new account in both fields.'),
      '#required' => TRUE,
    );
    $form['account']['pass']['#attributes']['autocomplete'] = 'off';
    $form['account']['notify']['#access'] = TRUE;
    _administerusersbyrole_hack_account_form_alter($form, $user, $account);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Tediously the user module uses hard-coded permission names.
 * Add 'admin-only' fields back in depending on our permissions.
 */
function administerusersbyrole_hack_form_user_form_alter(&$form, &$form_state) {
  $user = $form_state->getFormObject()->getEntity();
  $account = Drupal::currentUser();

  if (!$account->hasPermission('administer users')) {
    if (administerusersbyrole_user_access($user, 'update', $account)->isAllowed()) {
      _administerusersbyrole_hack_account_form_alter($form, $user, $account);
    }

    // Enable cancel button if required.
    if (administerusersbyrole_user_access($user, 'delete', $account)->isAllowed()) {
      $form['actions']['delete']['#access'] = TRUE;
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Tediously the user module uses hard-coded permission names.
 * Add 'admin-only' fields back in depending on our permissions.
 */
function administerusersbyrole_hack_form_user_cancel_form_alter(&$form, &$form_state) {
  $user = $form_state->getFormObject()->getEntity();
  $account = Drupal::currentUser();

  if (!$account->hasPermission('administer users') && administerusersbyrole_user_access($user, 'delete', $account)->isAllowed()) {
    // Corrections for UserCancelForm::buildForm.
    $form['user_cancel_method']['#access'] = TRUE;
    if ($user->id() != $account->id()) {
      $form['user_cancel_confirm']['#default_value'] = FALSE;
      $form['user_cancel_confirm']['#access'] = TRUE;
      $form['user_cancel_notify']['#access'] = $form['user_cancel_notify']['#default_value'];
      $form['user_cancel_notify']['#default_value'] = FALSE;
    }
    $form['access']['#value'] = TRUE;

    // Correction for UserCancelForm::getDescription.
    $form['description']['#markup'] = t('Select the method to cancel the account above.') . ' ' . t('This action cannot be undone.');
  }
}

/**
 * Corrections for AccountForm::form, which is the shared parent of
 * RegisterForm::form and ProfileForm::form.
 */
function _administerusersbyrole_hack_account_form_alter(&$form, $user, $account) {
  $form['account']['name']['#access'] = TRUE;
  $form['account']['status']['#default_value'] = $user->get('status')->value;
  $form['account']['status']['#access'] = TRUE;
  $form['language']['#access'] = TRUE;
}
